Pre-condition:
* Spelare A:s tur
* Spelare A står inte i schackmatt

Om A flyttar till en position som gör så att den hamnar i schack/fortfarande är i schack
    Ge invald move

*** När flytten är gjord ***

Om B hamnar i schackmatt, markera spelet som avslutat

Post-condition:
* Spelare B:s tur
* Spelare B står inte i schackmatt




is_player_check(A):
    list = []
    for all B pieces
        if b can do valid move to A:s king
            list.append(pos of b)
    return list

is_player_check_mate(A):
    check_players = is_player_check(A) // innehåller positioner

    // inga spelare chackar spelare A
    if check_players == []
        return false
    
    if can_avoid_by_moving_king(A)
        return false

    // Det finns 2 spelare som chackar, med andra ord är det kört:
    if check_players.len > 1
        return true

    if can_avoid_by_attack(A, check_players[0])
        return false

    if can_avoid_by_block(A, check_players[0])
        return false

    return true

can_avoid_by_moving_king(A):
    for pos in positionsAroundKing
        if A-player is at pos
            continue
        state_copy = state.copy()
        move the king to pos in state_copy
        if is_player_check(A, state_copy) == []
            return true
    return false

can_avoid_by_attack(A, check_player):
    for piece in A-players except kung
        if piece can do valid move to check_player
            state_copy = state.copy()
            move piece to check_player in state_copy
            if is_player_check(A, state_copy) == []
                return true
    return false

can_avoid_by_block(A, check_player):
    if check_player != queen/rook/bishop
        return false
    for pos in positions between check_player and A:s king
        for piece in A-players except king 
            if piece can do valid move to pos
                state_copy = state.copy()
                move piece to check_player in state_copy
                if is_player_check(A, state_copy) == []
                    return true
